import logging
import numpy as np
from gsm.database import select

log = logging.getLogger('crdt')

# C0, C10, A11, Ph11
# ^([\.\d-]+)\s+([\.\d-]+)\s+([\.\d-]+)\s+([\.\d-]+)\s+nagoya\.([a-zA-Z]+\d?)$  => ('Nagoya', '$5'): ($1, $2, $3, $4),
GSM_COEF = dict({
	(55.47, 37.32, 'V'): (0.7360, 0.0989, 0.5990, 58.20),
	(61.59, 129.41, 'V'): (0.2975, 0.1764, 0.1975, 57.3),
	(61.59, 129.41, 'N'): (0.3014, 0.1740, 0.2036, 36.5),
	(61.59, 129.41, 'S'): (0.2975, 0.1623, 0.2250, 18.2),
	(35.2, 137.0, 'V'): (0.6620, 0.1196, 0.4984, 53.30),
	(35.2, 137.0, 'N'): (0.6377, 0.1847, 0.4445, 69.60),
	(35.2, 137.0, 'S'): (0.6439, 0.0063, 0.5207, 42.20),
	(35.2, 137.0, 'E'): (0.6308, 0.0003, 0.4981, 71.80),
	(35.2, 137.0, 'W'): (0.6468, 0.2305, 0.4452, 35.00),
	(35.2, 137.0, 'NE'): (0.6057, 0.0613, 0.4629, 83.2),
	(35.2, 137.0, 'NW'): (0.6233, 0.2891, 0.3672, 54.8),
	(35.2, 137.0, 'SE'): (0.6139, -0.0846, 0.4901, 62.3),
	(35.2, 137.0, 'SW'): (0.6267, 0.1090, 0.4990, 23.4),
	(35.2, 137.0, 'N2'): (0.5480, 0.1722, 0.3541, 86.8),
	(35.2, 137.0, 'S2'): (0.5549, -0.0828, 0.4263, 35.9),
	(35.2, 137.0, 'E2'): (0.5332, -0.0897, 0.4078, 86.8),
	(35.2, 137.0, 'W2'): (0.5590, 0.2523, 0.3334, 17.8),
	(35.2, 137.0, 'N3'): (0.4641, 0.1387, 0.3164, 97.2),
	(35.2, 137.0, 'S3'): (0.4687, -0.1310, 0.3507, 31.9),
	(35.2, 137.0, 'E3'): (0.4445, -0.1205, 0.3272, 95.8),
	(35.2, 137.0, 'W3'): (0.4641, 0.1387, 0.3164, 97.2),
	(35.2, 137.0, 'G'): (0.0007, 0.3628, 0.2318, 177.5),
	(35.2, 137.0, 'GG'): (0.0078, 0.5171, 0.3323, 171.3),
	(67.57, 33.39, 'V'): (0.7900, 0.3950, 0.6220, 43.58),
	(78.06, 14.22, 'V'): (0.7900, 0.3950, 0.6220, 43.58)
})

def get_variation(interval, lat, lon, channel_name='V', period=3600):
	if (lat, lon, channel_name) not in GSM_COEF:
		log.warning(f'GSM: coef missing ({lat}, {lon}):{channel_name}')
		return None, None
	gsm_result = select(interval, ['A10', 'ax', 'ay', 'az'])
	if len(gsm_result) < 1:
		return None, None
	time, a10, x, y, z = [gsm_result[:,i] for i in range(5)]
	time_of_day = (time + period / 2) % 86400
	phi = 2 * np.pi * time_of_day / 86400 # planet rotation
	x_station = x * np.cos(phi)	  + y * np.sin(phi)
	y_station = x * np.sin(phi) * -1 + y * np.cos(phi)
	c0, c10, a11, p11 = GSM_COEF[(lat, lon, channel_name)]
	p11_station = ((lon + p11) % 360 / 360) * 2*np.pi
	Cx = -1 * a11 * np.cos(p11_station)
	Cy = -1 * a11 * np.sin(p11_station)
	Cz = -1 * c10
	variation = a10 * c0 +  x_station * Cx + y_station * Cy + z * Cz
	return time, variation